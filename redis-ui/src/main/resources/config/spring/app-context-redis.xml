<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd" >
    
    
    <context:property-placeholder location="classpath:config/spring/redis.properties" />
    
    <!-- redis单实例 -->
    <bean id="jeidsConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
        p:host-name="${redis.host}"
        p:port="${redis.port}"
        p:password="${redis.requirepass}"
        p:pool-config-ref="poolConfig"/>

    <!-- 配置Cluster
    <bean id="jeidsConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg ref="redisClusterConfiguration" />
        <constructor-arg ref="poolConfig" />
    </bean>-->

    <!-- 配置Cluster
    <bean id="redisClusterConfiguration"
        class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="7"></property>
        节点配置
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host1}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port1}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host2}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port2}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host3}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port3}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host4}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port4}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host5}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port5}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host6}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port6}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.host7}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port7}"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>-->
    
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
        <!-- <property name="maxActive" value="${redis.maxActive}" /> jedis 2.5后已改名 -->
         <!-- <property name="maxWait" value="${redis.maxWait}" />  -->
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
        p:connection-factory-ref="jeidsConnectionFactory">
        <!-- key 序列化使用 字符串类型  -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <!-- 描述：使用jackson序列化 在redis中可查看内容方便debug
              重要：默认jdkSerializer 内存占用是 jackson 4倍以上,
                     速度仅仅比json快一点 缓存条件下可忽略
                     所以优先考虑json序列化
           -->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>


        <!-- 开启事物后需要hibernate 事物成功提交 redis才会更新缓存
              并发情况下redis操作时间受业务代码影响 建议关闭redis事物 采用另一方法提高读取效率
             将消耗时间 消耗在写DB上 而不是等待上！！！
            ****************  Cluster 无法开启事物 ****************

        <property name="enableTransactionSupport" value="true"/> -->
    </bean>

    <cache:annotation-driven />
    <!-- 缓存管理器 -->
    
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
        <constructor-arg name="cacheNames">
            <list>
                <value>redisCache</value>
                <value>listCache</value>
            </list>
        </constructor-arg>
        <!-- 是否使用前缀 -->
        <property name="usePrefix" value="true"/>
        <!-- 默认有效期 -->
        <property name="defaultExpiration" value="${redis.expire}"/>
        <!-- 是否事务提交
        <property name="transactionAware" value="false"/>-->
        <!-- 是否在容器启动时初始化
        <property name="loadRemoteCachesOnStartup" value="true"/>-->
   </bean> 

</beans>